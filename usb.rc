#[link(name = "usb", vers = "0.1", author = "Kevin Mehall")];

mod libusb;
mod usb;

fn main() {
	let c = usb::Context::new();
	c.setDebug(2);
	
	let devices = c.listDevices();

	for devices.iter().advance |dev| {
		let desc = dev.descriptor();
		println(fmt!("Device %i.%i %04x:%04x",
			dev.bus(),
			dev.address(),
			desc.idVendor as uint,
			desc.idProduct as uint
		));
	}

	match c.find_by_vid_pid(0x59e3, 0x0a23) {
		Some(dev) => {
			match dev.open() {
				Ok(handle) => {
					let handle1 = handle.clone();
					let handle2 = handle.clone();

					do spawn {
						println(fmt!("1 Opened device %?", handle1.ptr()));
						println(fmt!("Read %?", handle1.read(0x81, libusb::LIBUSB_TRANSFER_TYPE_BULK, 64)));
						println(fmt!("Write %?", handle1.write(0x02, libusb::LIBUSB_TRANSFER_TYPE_BULK, [1,2,3])));
						println(fmt!("ctrl %?", handle1.ctrl_read(0xC0, 0x20, 0, 0, 64)));
					}
					do spawn {
						println(fmt!("2 Opened device %?", handle2.ptr()));
					}
				},
				Err(code) => {
					println(fmt!("Error opening device: %?", code));
				}
			}
		},
		None => println("Device not found"),
	}
}
